<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2025.1.1">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1536, 864]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="visual_oddball" valType="str" updates="None" name="expName"/>
    <Param val="" valType="str" updates="None" name="expVersion"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="visual_stimulus" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$imageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="visual_stimulus" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$stimDuration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="current_block = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment counter at the beginning of each trial&amp;#10;trialnr = trials.thisN&amp;#10;&amp;#10;stimulus_pulse_started = False&amp;#10;stimulus_pulse_ended = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# Hardware triggers for TMSI APEX EEG&amp;#10;if visual_stimulus.status == STARTED and not stimulus_pulse_started:&amp;#10;    win.callOnFlip(ser.write, f&quot;{marker:02d}&quot;.encode())&amp;#10;    stimulus_pulse_start_time = globalClock.getTime()&amp;#10;    stimulus_pulse_started = True&amp;#10;&amp;#10;if stimulus_pulse_started and not stimulus_pulse_ended:&amp;#10;    if globalClock.getTime() - stimulus_pulse_start_time &gt;= 0.02:&amp;#10;        win.callOnFlip(ser.write, &quot;00&quot;.encode())&amp;#10;        stimulus_pulse_ended = True&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Check if we've completed 150 trials (a block)&amp;#10;if (trials.thisN + 1) % 150 == 0 and trials.thisN &lt; trials.nTotal - 1:&amp;#10;    # Set a flag to show the break&amp;#10;    expInfo['show_break'] = True&amp;#10;else:&amp;#10;    expInfo['show_break'] = False&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="trialnumber" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="trialnumber" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.60, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$isi + stimDuration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;%d&quot; % trialnr" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="crosshair" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.15" valType="num" updates="constant" name="letterHeight"/>
        <Param val="crosshair" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="$stimDuration" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$isi + stimDuration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SerialOutComponent name="serialPort" plugin="None">
        <Param val="115200" valType="int" updates="None" name="baudrate"/>
        <Param val="8" valType="int" updates="None" name="bytesize"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="None" name="getResponse"/>
        <Param val="serialPort" valType="code" updates="None" name="name"/>
        <Param val="N" valType="str" updates="None" name="parity"/>
        <Param val="COM8" valType="str" updates="None" name="port"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="$str(marker)" valType="str" updates="None" name="startdata"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="1" valType="int" updates="None" name="stopbits"/>
        <Param val="'&quot;0&quot;'" valType="str" updates="None" name="stopdata"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="int" updates="None" name="timeout"/>
      </SerialOutComponent>
    </Routine>
    <Routine name="instructions">
      <RoutineSettingsComponent name="instructions" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_norm" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_norm" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You'll see visual stimuli (circles) presented one at a time. There are two different stimuli: a white circle (standard) and a black circle (deviant). You will be presented with a total of 300 trials split into 2 blocks.&amp;#10;&amp;#10;Your task is to count the number of times you see the black circle (deviant stimulus). At the end of each block, you will report how many black circles you counted.&amp;#10;&amp;#10;A fixation cross (+) will appear between stimuli. Try to keep your eyes centered, sit as still as possible, and minimize blinking during stimulus presentation. You'll get time to rest between blocks.&amp;#10;&amp;#10;Press SPACE to start the experiment." valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_instruct" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_instruct" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="text_align" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Code components should usually appear at the top&amp;#10;# of the routine. This one has to appear after the&amp;#10;# text component it refers to.&amp;#10;text_norm.alignText= 'left'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Code component set to Both&amp;#10;text_norm.setAlignHoriz('left')" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="text_align" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_3" plugin="None">
        <Param val="# LSL (Lab Streaming Layer) for real-time data streaming&amp;#10;# Uncomment if using LSL with external recording software&amp;#10;# from pylsl import StreamInfo, StreamOutlet&amp;#10;# info = StreamInfo('Trigger', 'Markers', 1, 0, 'string', 'myuidw43536')&amp;#10;# outlet = StreamOutlet(info)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize the break flag&amp;#10;expInfo['show_break'] = False&amp;#10;&amp;#10;# Serial port for hardware triggers to TMSI APEX EEG&amp;#10;import serial&amp;#10;ser = serial.Serial(&quot;COM8&quot;, 115200, timeout=1)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# OxySoft event marker - uncomment if using OxySoft&amp;#10;# oxysoft.WriteEvent(&quot;E&quot;, &quot;Experiment ended in PsychoPy&quot;)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="break_2">
      <RoutineSettingsComponent name="break_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="break_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_norm_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_norm_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Any text&amp;#10;&amp;#10;including line breaks&amp;#10;&amp;#10;This text component is white, so change the colour if you have a white background. It does not save the onset and offset time, but has been left justified with a wrap width of 1.8 norm units.&amp;#10;&amp;#10;Press the spacebar to continue" valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_instruct_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_instruct_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="text_align_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Code components should usually appear at the top&amp;#10;# of the routine. This one has to appear after the&amp;#10;# text component it refers to.&amp;#10;text_norm.alignText= 'left'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Code component set to Both&amp;#10;text_norm.setAlignHoriz('left')" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="text_align_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="end">
      <RoutineSettingsComponent name="end" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_norm_3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_norm_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Done!" valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_instruct_3" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_instruct_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="text_align_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Code components should usually appear at the top&amp;#10;# of the routine. This one has to appear after the&amp;#10;# text component it refers to.&amp;#10;text_norm.alignText= 'left'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Code component set to Both&amp;#10;text_norm.setAlignHoriz('left')" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="text_align_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# Close serial port for TMSI APEX EEG&amp;#10;ser.close()" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="# ser.write(bytes(b&quot;00&quot;))&amp;#10;# ser.close()&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Experiment starting in 2 seconds" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="block_break">
      <RoutineSettingsComponent name="block_break" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="block_break" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_norm_4" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_norm_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Have some rest, blink etc. then press SPACE to continue." valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.8" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_instruct_4" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_instruct_4" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="text_align_4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Code components should usually appear at the top&amp;#10;# of the routine. This one has to appear after the&amp;#10;# text component it refers to.&amp;#10;text_norm.alignText= 'left'" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Code component set to Both&amp;#10;text_norm.setAlignHoriz('left')" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="text_align_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="current_block = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="this_block = Number.parseInt(block);&amp;#10;if ((this_block !== current_block)) {&amp;#10;    current_block = this_block;&amp;#10;    if ((trials.thisN &gt; 0)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        continueRoutine = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Skip this routine if it's not time for a break&amp;#10;if not expInfo.get('show_break', False):&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="verwe">
      <RoutineSettingsComponent name="verwe" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="verwe" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions"/>
    <Routine name="pause"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3499155104158982)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.24937736965948)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2820959560338914)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.638700916585277)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.794378398369446)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7855130653271214)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.288649172270365)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.733182576035737)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.776576984842151)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.22008492443916)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4467889512641017)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.213767249937027)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7108342119765922)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.280254066191939)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.695725520038003)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.7154735532846894)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4188650785313717)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7369489684692576)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5708965282704572)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.49255234469508)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6778478075494994)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.6098186729873718)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5434387515391537)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.783727758442903)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.655469964158184)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.2421996757803666)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.430221013312045)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6735713307774018)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5709674741330653)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7316858338484868)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5689629260088795)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.617757787611986)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4996025015569834)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.7099317533103204)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.434447133400884)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6220896997147085)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.337116423316835)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4348557282303176)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.5223613082763738)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2018160064130838)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.281677452077327)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.643443768308543)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6665353830023586)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3691657878871657)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2663024654254462)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2845429263539092)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.741445864581768)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.533096092429772)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.483068785958172)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4838303275230629)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.343346016621532)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5393788550997327)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4113902187561669)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2245186745199808)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.30380999953996)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.660005658764756)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4289517845995987)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.766796491004773)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2907630196055022)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3699150222253258)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.251443597964564)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6266695125888218)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.553875072351198)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4568788509487989)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.751029770355255)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4450259971235329)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2406190295664423)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.684158920187453)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6607853129837538)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.21862822921949)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3585697849245182)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.655985090332833)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5445873955424176)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6457428130779874)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2360459052549733)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3692567466465055)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.315000759567987)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.410779990467642)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5932981145888063)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.474644132886148)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6843200564044103)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.730599242948153)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.65620668800786)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3281499007702673)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4779488700522443)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.6179307845287982)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.552450733526811)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.405410458599909)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5772851780254489)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4598693873055917)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6990712576593807)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2784959888071763)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2839283323906334)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2939942092222338)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5180920335306958)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4976965524275607)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3210362405237686)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5048900656321251)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6123706543020349)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3175360318389004)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4638016959707816)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.266821490363755)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4663486136199693)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3452630552963902)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.51366743594425)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3975319182122663)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.289269817602002)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7006485208734174)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7316466035890852)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.452445060960269)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.769244361404912)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2959263920476258)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4344519818797423)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6756759963349874)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.608701800934743)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.59032354254543)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2480830242812135)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2928551195864733)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.633673221379095)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6774618684373257)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.590248150260442)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.319925486537003)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3989137578878537)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4764105057182952)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4460810912180375)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.700833052384778)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3423729871154193)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.508286807156097)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2795475893672528)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5155258082304537)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2825332714953048)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6269346947722714)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5479192682343683)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3339934455466456)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.59693436941096)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5933022115063538)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4223918775093376)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5438279116002438)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5526022858475086)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.6832026885257385)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2541190455653133)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.2064579522116012)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4504203815744687)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6044404989959549)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2084795737970908)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.799235676925012)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.397971184779052)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.621340978096734)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7731701137309286)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.706571551884386)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(1))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.617187236753129)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7598060942482032)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5442834930525513)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.704037710688156)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3290654582392305)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2288528945546138)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3616406052741068)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.77226259752363)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.677407234779997)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.670433739537723)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3476818764096163)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2881436319787012)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4233310339250402)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3393359014101731)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4843269061140787)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4437682320985483)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3731282859104623)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3032619222151978)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3551097949922728)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3703402753841176)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5339157321205823)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.718942906346073)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.787681616636144)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.606562810909647)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.574442724410977)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.621116705763736)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5131386012952497)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.437442219102778)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.356972936021147)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2192825718019444)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4065848658042748)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.713418154787198)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5951702982848983)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.666362869713456)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.285198084479422)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3757513537838495)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.2169115893521023)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7075980829186477)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3800002617943243)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6412529713103172)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.5534111610197403)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.458688861672743)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7454812966940618)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.5941732761628131)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7101476159266378)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6342990659022223)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4340648652507184)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.576636501369445)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7475918254913811)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7044085185085436)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5095905155952205)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.34950763150286)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4629371734035694)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6960490083613489)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.2891926741503272)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4238679895291988)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4791925579078322)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.765606363378825)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2160355296822305)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6212263706586691)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6135159908308263)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3732657623831477)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.531318135898867)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5603664387754714)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4489476471455858)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.663321078418277)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3309865569806505)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.7673463551638535)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5463864172796606)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6845808845386008)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7329480328906124)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4241560868897345)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6268634021663024)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4235552312710449)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3775306360485662)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.2038659625027683)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5169407409122937)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.593190626335307)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.338162142491393)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.584957421803712)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.679173618655431)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2964844261460111)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6463069853323828)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5675913637407093)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.7978299421159418)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.594647005687731)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6392701505064424)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.276801070693268)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3427890606835338)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4102381165016746)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2589085180181785)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.348171713584071)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2687021690658034)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7519990214863377)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.355141772700494)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7003396696798114)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.524054839909682)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2147511552442547)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.61161776588929)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7003812457591136)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7383722747484995)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6216246924009656)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4821512058573336)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6090434138940062)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5744916440080343)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.273814456092909)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2026415101960388)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.271184928863856)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.76091124332876)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5737850460907683)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6722093169519656)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.6538976373006091)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2596615681359005)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.759089321485642)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4661390605378246)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4624276342380316)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3368581703659774)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.4767961918028982)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5247773138893752)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4456086999361424)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.6597960000301968)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7857894622696064)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7712270882303027)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.381770938838088)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.3179975541957465)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6135486049861936)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.7753373584589802)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2403924037061818)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5886920108437583)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5301599616325152)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3957650916519058)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.6723742431841655)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2029699163438512)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5218575995743135)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.323679870049846)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.510820575440337)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4194438913758578)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3051696753949658)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.5072662894243365)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4060034103068624)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5425346342916593)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'black_visual.png'), ('trialType', 'deviant'), ('isi', np.float64(1.5031657885705214)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(2)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4978891457828036)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.3940707840289328)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.5623029124470764)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.255500162184131)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.788938655361601)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.4683886377501594)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.2500333681279618)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))]), OrderedDict([('imageFile', 'white_visual.png'), ('trialType', 'standard'), ('isi', np.float64(1.276232899518445)), ('stimDuration', np.float64(0.5)), ('marker', np.int64(1)), ('block', np.int64(2))])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="generate_trial_csv/oddball_conditions.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="block_break"/>
    <LoopTerminator name="trials"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
